import telebot
from telebot import types
import openai

# –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = '–í–∞—à—Ç–æ–∫–µ–Ω'

# –í–∞—à API-–∫–ª—é—á –æ—Ç OpenAI
OPENAI_API_KEY = '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'
openai.api_key = OPENAI_API_KEY

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_profiles = {}

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user_profiles[user_id] = {'name': message.from_user.first_name,
                               'id': user_id,
                               'username': message.from_user.username,
                               'questions_asked': 0,
                               'remaining_daily_queries': 3}

    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("üîµ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question'),
                 types.InlineKeyboardButton("üî¥ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='show_profile'))
    keyboard.row(types.InlineKeyboardButton("‚ö´Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", callback_data='source_code'),
                 types.InlineKeyboardButton("üü† –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data='contact_admin'))

    bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫ ChatGPT ü§ñ', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.message.chat.id

    if call.data == 'ask_question':
        # –ü—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.register_next_step_handler(call.message, process_user_input)
    elif call.data == 'show_profile':
        show_profile(user_id)
    elif call.data == 'source_code':
        send_github_link(user_id)
    elif call.data == 'contact_admin':
        contact_admin(user_id)

def process_user_input(message):
    user_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_query = message.text

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profiles[user_id]['questions_asked'] += 1
    user_profiles[user_id]['remaining_daily_queries'] -= 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
    bot.send_message(user_id, "–î—É–º–∞—éüß†...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT-3
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=user_query,
        max_tokens=150
    )

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT-3
    answer = response.choices[0].text.strip()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(user_id, answer)

def show_profile(user_id):
    profile_data = user_profiles[user_id]

    profile_text = (
        f"–ò–º—è: {profile_data['name']}\n"
        f"ID: {profile_data['id']}\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile_data['username']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {profile_data['questions_asked']}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –¥–µ–Ω—å: {profile_data['remaining_daily_queries']}"
    )

    bot.send_message(user_id, profile_text)

def send_github_link(user_id):
    bot.send_message(user_id, "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub: https://github.com/your_username/your_repository")

def contact_admin(user_id):
    bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞? –ü–∏—à–∏ —Å—é–¥–∞ https://t.me/pizzaway")

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
def back_to_menu_callback(call):
    user_id = call.message.chat.id
    start(user_id)

if __name__ == "__main__":
    bot.polling(none_stop=True)

